/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CameraConnectType', null, global);
goog.exportSymbol('proto.CameraType', null, global);
goog.exportSymbol('proto.OnvifEventLevel', null, global);
goog.exportSymbol('proto.SocketConnectType', null, global);
goog.exportSymbol('proto.VidBlob', null, global);
goog.exportSymbol('proto.VidBlobList', null, global);
goog.exportSymbol('proto.VidCamera', null, global);
goog.exportSymbol('proto.VidCameraId', null, global);
goog.exportSymbol('proto.VidCameraList', null, global);
goog.exportSymbol('proto.VidClientConf', null, global);
goog.exportSymbol('proto.VidDisk', null, global);
goog.exportSymbol('proto.VidDiskList', null, global);
goog.exportSymbol('proto.VidEmap', null, global);
goog.exportSymbol('proto.VidEmapCamera', null, global);
goog.exportSymbol('proto.VidEmapList', null, global);
goog.exportSymbol('proto.VidEvent', null, global);
goog.exportSymbol('proto.VidEventDBConf', null, global);
goog.exportSymbol('proto.VidEventDBType', null, global);
goog.exportSymbol('proto.VidGroup', null, global);
goog.exportSymbol('proto.VidGroupList', null, global);
goog.exportSymbol('proto.VidHDFSConf', null, global);
goog.exportSymbol('proto.VidLanguage', null, global);
goog.exportSymbol('proto.VidLayout', null, global);
goog.exportSymbol('proto.VidRecType', null, global);
goog.exportSymbol('proto.VidSocket', null, global);
goog.exportSymbol('proto.VidSocketList', null, global);
goog.exportSymbol('proto.VidStor', null, global);
goog.exportSymbol('proto.VidStorList', null, global);
goog.exportSymbol('proto.VidStorServerConf', null, global);
goog.exportSymbol('proto.VidStream', null, global);
goog.exportSymbol('proto.VidStreamList', null, global);
goog.exportSymbol('proto.VidStreamUrl', null, global);
goog.exportSymbol('proto.VidStreamUrlList', null, global);
goog.exportSymbol('proto.VidTour', null, global);
goog.exportSymbol('proto.VidTourList', null, global);
goog.exportSymbol('proto.VidUser', null, global);
goog.exportSymbol('proto.VidUserList', null, global);
goog.exportSymbol('proto.VidView', null, global);
goog.exportSymbol('proto.VidViewList', null, global);
goog.exportSymbol('proto.VidViewWindow', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidUser.displayName = 'proto.VidUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidUser.prototype.toObject = function(opt_includeInstance) {
  return proto.VidUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidUser} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    strpasswd: jspb.Message.getFieldWithDefault(msg, 3, ""),
    strroleid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidUser}
 */
proto.VidUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidUser;
  return proto.VidUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidUser}
 */
proto.VidUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrpasswd(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrroleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidUser} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStrpasswd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStrroleid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string strId = 1;
 * @return {string}
 */
proto.VidUser.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidUser.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strName = 2;
 * @return {string}
 */
proto.VidUser.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidUser.prototype.setStrname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string strPasswd = 3;
 * @return {string}
 */
proto.VidUser.prototype.getStrpasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.VidUser.prototype.setStrpasswd = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string strRoleId = 4;
 * @return {string}
 */
proto.VidUser.prototype.getStrroleid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.VidUser.prototype.setStrroleid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidUserList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidUserList.repeatedFields_, null);
};
goog.inherits(proto.VidUserList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidUserList.displayName = 'proto.VidUserList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidUserList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidUserList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidUserList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidUserList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidUserList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cviduserList: jspb.Message.toObjectList(msg.getCviduserList(),
    proto.VidUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidUserList}
 */
proto.VidUserList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidUserList;
  return proto.VidUserList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidUserList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidUserList}
 */
proto.VidUserList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidUser;
      reader.readMessage(value,proto.VidUser.deserializeBinaryFromReader);
      msg.addCviduser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidUserList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidUserList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidUserList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidUserList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCviduserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidUser.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidUser cVidUser = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidUser>}
 */
proto.VidUserList.prototype.getCviduserList = function() {
  return /** @type{!Array.<!proto.VidUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidUser, 1));
};


/** @param {!Array.<!proto.VidUser>} value */
proto.VidUserList.prototype.setCviduserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidUser}
 */
proto.VidUserList.prototype.addCviduser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidUser, opt_index);
};


proto.VidUserList.prototype.clearCviduserList = function() {
  this.setCviduserList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidStorServerConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidStorServerConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidStorServerConf.displayName = 'proto.VidStorServerConf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidStorServerConf.prototype.toObject = function(opt_includeInstance) {
  return proto.VidStorServerConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidStorServerConf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidStorServerConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    noapiport: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stradminpasswd: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nrtspport: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nrtmpport: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nhlsport: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidStorServerConf}
 */
proto.VidStorServerConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidStorServerConf;
  return proto.VidStorServerConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidStorServerConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidStorServerConf}
 */
proto.VidStorServerConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNoapiport(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStradminpasswd(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNrtspport(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNrtmpport(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNhlsport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidStorServerConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidStorServerConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidStorServerConf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidStorServerConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNoapiport();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStradminpasswd();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNrtspport();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNrtmpport();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNhlsport();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 nOapiPort = 1;
 * @return {number}
 */
proto.VidStorServerConf.prototype.getNoapiport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.VidStorServerConf.prototype.setNoapiport = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strAdminPasswd = 2;
 * @return {string}
 */
proto.VidStorServerConf.prototype.getStradminpasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidStorServerConf.prototype.setStradminpasswd = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 nRTSPPort = 3;
 * @return {number}
 */
proto.VidStorServerConf.prototype.getNrtspport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.VidStorServerConf.prototype.setNrtspport = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 nRTMPPort = 4;
 * @return {number}
 */
proto.VidStorServerConf.prototype.getNrtmpport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.VidStorServerConf.prototype.setNrtmpport = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 nHLSPort = 5;
 * @return {number}
 */
proto.VidStorServerConf.prototype.getNhlsport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.VidStorServerConf.prototype.setNhlsport = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidCamera = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidCamera.repeatedFields_, null);
};
goog.inherits(proto.VidCamera, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidCamera.displayName = 'proto.VidCamera';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidCamera.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidCamera.prototype.toObject = function(opt_includeInstance) {
  return proto.VidCamera.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidCamera} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidCamera.toObject = function(includeInstance, msg) {
  var f, obj = {
    bdisable: jspb.Message.getFieldWithDefault(msg, 1, false),
    strid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    strname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ntype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    strip: jspb.Message.getFieldWithDefault(msg, 5, ""),
    strport: jspb.Message.getFieldWithDefault(msg, 6, ""),
    struser: jspb.Message.getFieldWithDefault(msg, 7, ""),
    strpasswd: jspb.Message.getFieldWithDefault(msg, 8, ""),
    stronvifaddress: jspb.Message.getFieldWithDefault(msg, 9, ""),
    bprofiletoken: jspb.Message.getFieldWithDefault(msg, 10, false),
    strprofiletoken1: jspb.Message.getFieldWithDefault(msg, 11, ""),
    strprofiletoken2: jspb.Message.getFieldWithDefault(msg, 12, ""),
    strfile: jspb.Message.getFieldWithDefault(msg, 13, ""),
    strrtspurl: jspb.Message.getFieldWithDefault(msg, 14, ""),
    bhwaccel: jspb.Message.getFieldWithDefault(msg, 15, false),
    bservermotion: jspb.Message.getFieldWithDefault(msg, 16, false),
    nconnecttype: jspb.Message.getFieldWithDefault(msg, 17, 0),
    bhdfsrecord: jspb.Message.getFieldWithDefault(msg, 18, false),
    crecschedList: jspb.Message.getField(msg, 20),
    nprerecsec: jspb.Message.getFieldWithDefault(msg, 21, 0),
    npostrecsec: jspb.Message.getFieldWithDefault(msg, 22, 0),
    bmotionjpeg: jspb.Message.getFieldWithDefault(msg, 23, false),
    nrecordstream: jspb.Message.getFieldWithDefault(msg, 24, 0),
    nservermotionstream: jspb.Message.getFieldWithDefault(msg, 25, 0),
    nonvifevtlevel: jspb.Message.getFieldWithDefault(msg, 26, 0),
    strsched: jspb.Message.getFieldWithDefault(msg, 27, ""),
    strmotreg: jspb.Message.getFieldWithDefault(msg, 28, ""),
    bonline: jspb.Message.getFieldWithDefault(msg, 29, false),
    brec: jspb.Message.getFieldWithDefault(msg, 30, false),
    nch: jspb.Message.getFieldWithDefault(msg, 31, 0),
    bptzcontol: jspb.Message.getFieldWithDefault(msg, 32, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidCamera}
 */
proto.VidCamera.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidCamera;
  return proto.VidCamera.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidCamera} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidCamera}
 */
proto.VidCamera.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBdisable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    case 4:
      var value = /** @type {!proto.CameraType} */ (reader.readEnum());
      msg.setNtype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrip(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrport(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStruser(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrpasswd(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStronvifaddress(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBprofiletoken(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrprofiletoken1(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrprofiletoken2(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrfile(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrrtspurl(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhwaccel(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBservermotion(value);
      break;
    case 17:
      var value = /** @type {!proto.CameraConnectType} */ (reader.readEnum());
      msg.setNconnecttype(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhdfsrecord(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.addCrecsched(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNprerecsec(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNpostrecsec(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBmotionjpeg(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNrecordstream(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNservermotionstream(value);
      break;
    case 26:
      var value = /** @type {!proto.OnvifEventLevel} */ (reader.readEnum());
      msg.setNonvifevtlevel(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrsched(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrmotreg(value);
      break;
    case 29:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBonline(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBrec(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNch(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBptzcontol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidCamera.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidCamera.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidCamera} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidCamera.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBdisable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getStrip();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStrport();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStruser();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStrpasswd();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStronvifaddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBprofiletoken();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getStrprofiletoken1();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getStrprofiletoken2();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getStrfile();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getStrrtspurl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBhwaccel();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getBservermotion();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getNconnecttype();
  if (f !== 0.0) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = message.getBhdfsrecord();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getCrecschedList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      20,
      f
    );
  }
  f = message.getNprerecsec();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getNpostrecsec();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getBmotionjpeg();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = message.getNrecordstream();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getNservermotionstream();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getNonvifevtlevel();
  if (f !== 0.0) {
    writer.writeEnum(
      26,
      f
    );
  }
  f = message.getStrsched();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getStrmotreg();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getBonline();
  if (f) {
    writer.writeBool(
      29,
      f
    );
  }
  f = message.getBrec();
  if (f) {
    writer.writeBool(
      30,
      f
    );
  }
  f = message.getNch();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = message.getBptzcontol();
  if (f) {
    writer.writeBool(
      32,
      f
    );
  }
};


/**
 * optional bool bDisable = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBdisable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBdisable = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strId = 2;
 * @return {string}
 */
proto.VidCamera.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string strName = 3;
 * @return {string}
 */
proto.VidCamera.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional CameraType nType = 4;
 * @return {!proto.CameraType}
 */
proto.VidCamera.prototype.getNtype = function() {
  return /** @type {!proto.CameraType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.CameraType} value */
proto.VidCamera.prototype.setNtype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string strIP = 5;
 * @return {string}
 */
proto.VidCamera.prototype.getStrip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrip = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string strPort = 6;
 * @return {string}
 */
proto.VidCamera.prototype.getStrport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrport = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string strUser = 7;
 * @return {string}
 */
proto.VidCamera.prototype.getStruser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStruser = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string strPasswd = 8;
 * @return {string}
 */
proto.VidCamera.prototype.getStrpasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrpasswd = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string strONVIFAddress = 9;
 * @return {string}
 */
proto.VidCamera.prototype.getStronvifaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStronvifaddress = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool bProfileToken = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBprofiletoken = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBprofiletoken = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string strProfileToken1 = 11;
 * @return {string}
 */
proto.VidCamera.prototype.getStrprofiletoken1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrprofiletoken1 = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string strProfileToken2 = 12;
 * @return {string}
 */
proto.VidCamera.prototype.getStrprofiletoken2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrprofiletoken2 = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string strFile = 13;
 * @return {string}
 */
proto.VidCamera.prototype.getStrfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrfile = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string strRTSPUrl = 14;
 * @return {string}
 */
proto.VidCamera.prototype.getStrrtspurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrrtspurl = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional bool bHWaccel = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBhwaccel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBhwaccel = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional bool bServerMotion = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBservermotion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBservermotion = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional CameraConnectType nConnectType = 17;
 * @return {!proto.CameraConnectType}
 */
proto.VidCamera.prototype.getNconnecttype = function() {
  return /** @type {!proto.CameraConnectType} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {!proto.CameraConnectType} value */
proto.VidCamera.prototype.setNconnecttype = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional bool bHDFSRecord = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBhdfsrecord = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBhdfsrecord = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * repeated string cRecSched = 20;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.VidCamera.prototype.getCrecschedList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 20));
};


/** @param {!Array.<string>} value */
proto.VidCamera.prototype.setCrecschedList = function(value) {
  jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.VidCamera.prototype.addCrecsched = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


proto.VidCamera.prototype.clearCrecschedList = function() {
  this.setCrecschedList([]);
};


/**
 * optional int32 nPreRecSec = 21;
 * @return {number}
 */
proto.VidCamera.prototype.getNprerecsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.VidCamera.prototype.setNprerecsec = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional int32 nPostRecSec = 22;
 * @return {number}
 */
proto.VidCamera.prototype.getNpostrecsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.VidCamera.prototype.setNpostrecsec = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional bool bMotionJPEG = 23;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBmotionjpeg = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 23, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBmotionjpeg = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional int32 nRecordStream = 24;
 * @return {number}
 */
proto.VidCamera.prototype.getNrecordstream = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.VidCamera.prototype.setNrecordstream = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional int32 nServerMotionStream = 25;
 * @return {number}
 */
proto.VidCamera.prototype.getNservermotionstream = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.VidCamera.prototype.setNservermotionstream = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * optional OnvifEventLevel nOnvifEvtLevel = 26;
 * @return {!proto.OnvifEventLevel}
 */
proto.VidCamera.prototype.getNonvifevtlevel = function() {
  return /** @type {!proto.OnvifEventLevel} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {!proto.OnvifEventLevel} value */
proto.VidCamera.prototype.setNonvifevtlevel = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * optional string strSched = 27;
 * @return {string}
 */
proto.VidCamera.prototype.getStrsched = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrsched = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * optional string strMotReg = 28;
 * @return {string}
 */
proto.VidCamera.prototype.getStrmotreg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.VidCamera.prototype.setStrmotreg = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * optional bool bOnline = 29;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBonline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 29, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBonline = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * optional bool bRec = 30;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBrec = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 30, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBrec = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * optional int32 nCh = 31;
 * @return {number}
 */
proto.VidCamera.prototype.getNch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.VidCamera.prototype.setNch = function(value) {
  jspb.Message.setField(this, 31, value);
};


/**
 * optional bool bPtzContol = 32;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidCamera.prototype.getBptzcontol = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 32, false));
};


/** @param {boolean} value */
proto.VidCamera.prototype.setBptzcontol = function(value) {
  jspb.Message.setField(this, 32, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidCameraList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidCameraList.repeatedFields_, null);
};
goog.inherits(proto.VidCameraList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidCameraList.displayName = 'proto.VidCameraList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidCameraList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidCameraList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidCameraList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidCameraList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidCameraList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cvidcameraList: jspb.Message.toObjectList(msg.getCvidcameraList(),
    proto.VidCamera.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidCameraList}
 */
proto.VidCameraList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidCameraList;
  return proto.VidCameraList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidCameraList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidCameraList}
 */
proto.VidCameraList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidCamera;
      reader.readMessage(value,proto.VidCamera.deserializeBinaryFromReader);
      msg.addCvidcamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidCameraList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidCameraList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidCameraList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidCameraList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCvidcameraList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidCamera.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidCamera cVidCamera = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidCamera>}
 */
proto.VidCameraList.prototype.getCvidcameraList = function() {
  return /** @type{!Array.<!proto.VidCamera>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidCamera, 1));
};


/** @param {!Array.<!proto.VidCamera>} value */
proto.VidCameraList.prototype.setCvidcameraList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidCamera=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidCamera}
 */
proto.VidCameraList.prototype.addCvidcamera = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidCamera, opt_index);
};


proto.VidCameraList.prototype.clearCvidcameraList = function() {
  this.setCvidcameraList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidDisk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidDisk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidDisk.displayName = 'proto.VidDisk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidDisk.prototype.toObject = function(opt_includeInstance) {
  return proto.VidDisk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidDisk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidDisk.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ntotalsize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nfreesize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nstorlimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nstorused: jspb.Message.getFieldWithDefault(msg, 6, 0),
    strrecordpath: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidDisk}
 */
proto.VidDisk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidDisk;
  return proto.VidDisk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidDisk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidDisk}
 */
proto.VidDisk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrpath(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNtotalsize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNfreesize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNstorlimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNstorused(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrrecordpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidDisk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidDisk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidDisk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidDisk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNtotalsize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNfreesize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getNstorlimit();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getNstorused();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getStrrecordpath();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string strId = 1;
 * @return {string}
 */
proto.VidDisk.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidDisk.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strPath = 2;
 * @return {string}
 */
proto.VidDisk.prototype.getStrpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidDisk.prototype.setStrpath = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 nTotalSize = 3;
 * @return {number}
 */
proto.VidDisk.prototype.getNtotalsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.VidDisk.prototype.setNtotalsize = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 nFreeSize = 4;
 * @return {number}
 */
proto.VidDisk.prototype.getNfreesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.VidDisk.prototype.setNfreesize = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 nStorLimit = 5;
 * @return {number}
 */
proto.VidDisk.prototype.getNstorlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.VidDisk.prototype.setNstorlimit = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 nStorUsed = 6;
 * @return {number}
 */
proto.VidDisk.prototype.getNstorused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.VidDisk.prototype.setNstorused = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string strRecordPath = 7;
 * @return {string}
 */
proto.VidDisk.prototype.getStrrecordpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.VidDisk.prototype.setStrrecordpath = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidDiskList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidDiskList.repeatedFields_, null);
};
goog.inherits(proto.VidDiskList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidDiskList.displayName = 'proto.VidDiskList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidDiskList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidDiskList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidDiskList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidDiskList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidDiskList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cviddiskList: jspb.Message.toObjectList(msg.getCviddiskList(),
    proto.VidDisk.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidDiskList}
 */
proto.VidDiskList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidDiskList;
  return proto.VidDiskList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidDiskList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidDiskList}
 */
proto.VidDiskList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidDisk;
      reader.readMessage(value,proto.VidDisk.deserializeBinaryFromReader);
      msg.addCviddisk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidDiskList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidDiskList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidDiskList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidDiskList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCviddiskList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidDisk.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidDisk cVidDisk = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidDisk>}
 */
proto.VidDiskList.prototype.getCviddiskList = function() {
  return /** @type{!Array.<!proto.VidDisk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidDisk, 1));
};


/** @param {!Array.<!proto.VidDisk>} value */
proto.VidDiskList.prototype.setCviddiskList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidDisk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidDisk}
 */
proto.VidDiskList.prototype.addCviddisk = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidDisk, opt_index);
};


proto.VidDiskList.prototype.clearCviddiskList = function() {
  this.setCviddiskList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidHDFSConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidHDFSConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidHDFSConf.displayName = 'proto.VidHDFSConf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidHDFSConf.prototype.toObject = function(opt_includeInstance) {
  return proto.VidHDFSConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidHDFSConf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidHDFSConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    strnamenode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strport: jspb.Message.getFieldWithDefault(msg, 2, ""),
    struser: jspb.Message.getFieldWithDefault(msg, 3, ""),
    strpasswd: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nfileinterval: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidHDFSConf}
 */
proto.VidHDFSConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidHDFSConf;
  return proto.VidHDFSConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidHDFSConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidHDFSConf}
 */
proto.VidHDFSConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrnamenode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrport(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStruser(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrpasswd(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNfileinterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidHDFSConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidHDFSConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidHDFSConf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidHDFSConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrnamenode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrport();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStruser();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStrpasswd();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNfileinterval();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string strNameNode = 1;
 * @return {string}
 */
proto.VidHDFSConf.prototype.getStrnamenode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidHDFSConf.prototype.setStrnamenode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strPort = 2;
 * @return {string}
 */
proto.VidHDFSConf.prototype.getStrport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidHDFSConf.prototype.setStrport = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string strUser = 3;
 * @return {string}
 */
proto.VidHDFSConf.prototype.getStruser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.VidHDFSConf.prototype.setStruser = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string strPasswd = 4;
 * @return {string}
 */
proto.VidHDFSConf.prototype.getStrpasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.VidHDFSConf.prototype.setStrpasswd = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 nFileInterval = 5;
 * @return {number}
 */
proto.VidHDFSConf.prototype.getNfileinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.VidHDFSConf.prototype.setNfileinterval = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidCameraId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidCameraId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidCameraId.displayName = 'proto.VidCameraId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidCameraId.prototype.toObject = function(opt_includeInstance) {
  return proto.VidCameraId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidCameraId} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidCameraId.toObject = function(includeInstance, msg) {
  var f, obj = {
    strstorid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strcameraid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidCameraId}
 */
proto.VidCameraId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidCameraId;
  return proto.VidCameraId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidCameraId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidCameraId}
 */
proto.VidCameraId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstorid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrcameraid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidCameraId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidCameraId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidCameraId} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidCameraId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrstorid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrcameraid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string strStorId = 1;
 * @return {string}
 */
proto.VidCameraId.prototype.getStrstorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidCameraId.prototype.setStrstorid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strCameraId = 2;
 * @return {string}
 */
proto.VidCameraId.prototype.getStrcameraid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidCameraId.prototype.setStrcameraid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidClientConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidClientConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidClientConf.displayName = 'proto.VidClientConf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidClientConf.prototype.toObject = function(opt_includeInstance) {
  return proto.VidClientConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidClientConf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidClientConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    nlang: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stradminpasswd: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bautologin: jspb.Message.getFieldWithDefault(msg, 3, false),
    bautofullscreen: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidClientConf}
 */
proto.VidClientConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidClientConf;
  return proto.VidClientConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidClientConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidClientConf}
 */
proto.VidClientConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VidLanguage} */ (reader.readEnum());
      msg.setNlang(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStradminpasswd(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBautologin(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBautofullscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidClientConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidClientConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidClientConf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidClientConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNlang();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStradminpasswd();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBautologin();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBautofullscreen();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional VidLanguage nLang = 1;
 * @return {!proto.VidLanguage}
 */
proto.VidClientConf.prototype.getNlang = function() {
  return /** @type {!proto.VidLanguage} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.VidLanguage} value */
proto.VidClientConf.prototype.setNlang = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strAdminPasswd = 2;
 * @return {string}
 */
proto.VidClientConf.prototype.getStradminpasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidClientConf.prototype.setStradminpasswd = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool bAutoLogin = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidClientConf.prototype.getBautologin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.VidClientConf.prototype.setBautologin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool bAutoFullScreen = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidClientConf.prototype.getBautofullscreen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.VidClientConf.prototype.setBautofullscreen = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidStor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidStor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidStor.displayName = 'proto.VidStor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidStor.prototype.toObject = function(opt_includeInstance) {
  return proto.VidStor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidStor} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidStor.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    strip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    strport: jspb.Message.getFieldWithDefault(msg, 4, ""),
    struser: jspb.Message.getFieldWithDefault(msg, 5, ""),
    strpasswd: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidStor}
 */
proto.VidStor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidStor;
  return proto.VidStor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidStor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidStor}
 */
proto.VidStor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrip(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrport(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStruser(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrpasswd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidStor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidStor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidStor} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidStor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStrip();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStrport();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStruser();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStrpasswd();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string strId = 1;
 * @return {string}
 */
proto.VidStor.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidStor.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strName = 2;
 * @return {string}
 */
proto.VidStor.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidStor.prototype.setStrname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string strIP = 3;
 * @return {string}
 */
proto.VidStor.prototype.getStrip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.VidStor.prototype.setStrip = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string strPort = 4;
 * @return {string}
 */
proto.VidStor.prototype.getStrport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.VidStor.prototype.setStrport = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string strUser = 5;
 * @return {string}
 */
proto.VidStor.prototype.getStruser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.VidStor.prototype.setStruser = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string strPasswd = 6;
 * @return {string}
 */
proto.VidStor.prototype.getStrpasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.VidStor.prototype.setStrpasswd = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidStorList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidStorList.repeatedFields_, null);
};
goog.inherits(proto.VidStorList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidStorList.displayName = 'proto.VidStorList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidStorList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidStorList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidStorList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidStorList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidStorList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cvidstorList: jspb.Message.toObjectList(msg.getCvidstorList(),
    proto.VidStor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidStorList}
 */
proto.VidStorList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidStorList;
  return proto.VidStorList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidStorList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidStorList}
 */
proto.VidStorList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidStor;
      reader.readMessage(value,proto.VidStor.deserializeBinaryFromReader);
      msg.addCvidstor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidStorList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidStorList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidStorList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidStorList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCvidstorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidStor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidStor cVidStor = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidStor>}
 */
proto.VidStorList.prototype.getCvidstorList = function() {
  return /** @type{!Array.<!proto.VidStor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidStor, 1));
};


/** @param {!Array.<!proto.VidStor>} value */
proto.VidStorList.prototype.setCvidstorList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidStor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidStor}
 */
proto.VidStorList.prototype.addCvidstor = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidStor, opt_index);
};


proto.VidStorList.prototype.clearCvidstorList = function() {
  this.setCvidstorList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidViewWindow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidViewWindow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidViewWindow.displayName = 'proto.VidViewWindow';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidViewWindow.prototype.toObject = function(opt_includeInstance) {
  return proto.VidViewWindow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidViewWindow} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidViewWindow.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: (f = msg.getCid()) && proto.VidCameraId.toObject(includeInstance, f),
    nwindowsid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bhwaccel: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidViewWindow}
 */
proto.VidViewWindow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidViewWindow;
  return proto.VidViewWindow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidViewWindow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidViewWindow}
 */
proto.VidViewWindow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidCameraId;
      reader.readMessage(value,proto.VidCameraId.deserializeBinaryFromReader);
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNwindowsid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhwaccel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidViewWindow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidViewWindow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidViewWindow} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidViewWindow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VidCameraId.serializeBinaryToWriter
    );
  }
  f = message.getNwindowsid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBhwaccel();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional VidCameraId cId = 1;
 * @return {?proto.VidCameraId}
 */
proto.VidViewWindow.prototype.getCid = function() {
  return /** @type{?proto.VidCameraId} */ (
    jspb.Message.getWrapperField(this, proto.VidCameraId, 1));
};


/** @param {?proto.VidCameraId|undefined} value */
proto.VidViewWindow.prototype.setCid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.VidViewWindow.prototype.clearCid = function() {
  this.setCid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VidViewWindow.prototype.hasCid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 nWindowsId = 2;
 * @return {number}
 */
proto.VidViewWindow.prototype.getNwindowsid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.VidViewWindow.prototype.setNwindowsid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool bHWAccel = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidViewWindow.prototype.getBhwaccel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.VidViewWindow.prototype.setBhwaccel = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidView.repeatedFields_, null);
};
goog.inherits(proto.VidView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidView.displayName = 'proto.VidView';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidView.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidView.prototype.toObject = function(opt_includeInstance) {
  return proto.VidView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidView} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidView.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cviewList: jspb.Message.toObjectList(msg.getCviewList(),
    proto.VidViewWindow.toObject, includeInstance),
    clayout: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidView}
 */
proto.VidView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidView;
  return proto.VidView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidView}
 */
proto.VidView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    case 3:
      var value = new proto.VidViewWindow;
      reader.readMessage(value,proto.VidViewWindow.deserializeBinaryFromReader);
      msg.addCview(value);
      break;
    case 4:
      var value = /** @type {!proto.VidLayout} */ (reader.readEnum());
      msg.setClayout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidView} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCviewList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.VidViewWindow.serializeBinaryToWriter
    );
  }
  f = message.getClayout();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string strId = 1;
 * @return {string}
 */
proto.VidView.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidView.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strName = 2;
 * @return {string}
 */
proto.VidView.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidView.prototype.setStrname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated VidViewWindow cView = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidViewWindow>}
 */
proto.VidView.prototype.getCviewList = function() {
  return /** @type{!Array.<!proto.VidViewWindow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidViewWindow, 3));
};


/** @param {!Array.<!proto.VidViewWindow>} value */
proto.VidView.prototype.setCviewList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.VidViewWindow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidViewWindow}
 */
proto.VidView.prototype.addCview = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.VidViewWindow, opt_index);
};


proto.VidView.prototype.clearCviewList = function() {
  this.setCviewList([]);
};


/**
 * optional VidLayout cLayout = 4;
 * @return {!proto.VidLayout}
 */
proto.VidView.prototype.getClayout = function() {
  return /** @type {!proto.VidLayout} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.VidLayout} value */
proto.VidView.prototype.setClayout = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidViewList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidViewList.repeatedFields_, null);
};
goog.inherits(proto.VidViewList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidViewList.displayName = 'proto.VidViewList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidViewList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidViewList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidViewList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidViewList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidViewList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cvidviewList: jspb.Message.toObjectList(msg.getCvidviewList(),
    proto.VidView.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidViewList}
 */
proto.VidViewList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidViewList;
  return proto.VidViewList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidViewList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidViewList}
 */
proto.VidViewList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidView;
      reader.readMessage(value,proto.VidView.deserializeBinaryFromReader);
      msg.addCvidview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidViewList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidViewList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidViewList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidViewList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCvidviewList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidView.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidView cVidView = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidView>}
 */
proto.VidViewList.prototype.getCvidviewList = function() {
  return /** @type{!Array.<!proto.VidView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidView, 1));
};


/** @param {!Array.<!proto.VidView>} value */
proto.VidViewList.prototype.setCvidviewList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidView}
 */
proto.VidViewList.prototype.addCvidview = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidView, opt_index);
};


proto.VidViewList.prototype.clearCvidviewList = function() {
  this.setCvidviewList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidTour = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidTour.repeatedFields_, null);
};
goog.inherits(proto.VidTour, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidTour.displayName = 'proto.VidTour';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidTour.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidTour.prototype.toObject = function(opt_includeInstance) {
  return proto.VidTour.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidTour} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidTour.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    strviewList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidTour}
 */
proto.VidTour.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidTour;
  return proto.VidTour.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidTour} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidTour}
 */
proto.VidTour.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addStrview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidTour.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidTour.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidTour} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidTour.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStrviewList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string strId = 1;
 * @return {string}
 */
proto.VidTour.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidTour.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strName = 2;
 * @return {string}
 */
proto.VidTour.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidTour.prototype.setStrname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string strView = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.VidTour.prototype.getStrviewList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.VidTour.prototype.setStrviewList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.VidTour.prototype.addStrview = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.VidTour.prototype.clearStrviewList = function() {
  this.setStrviewList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidTourList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidTourList.repeatedFields_, null);
};
goog.inherits(proto.VidTourList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidTourList.displayName = 'proto.VidTourList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidTourList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidTourList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidTourList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidTourList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidTourList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cvidtourList: jspb.Message.toObjectList(msg.getCvidtourList(),
    proto.VidTour.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidTourList}
 */
proto.VidTourList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidTourList;
  return proto.VidTourList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidTourList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidTourList}
 */
proto.VidTourList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidTour;
      reader.readMessage(value,proto.VidTour.deserializeBinaryFromReader);
      msg.addCvidtour(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidTourList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidTourList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidTourList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidTourList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCvidtourList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidTour.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidTour cVidTour = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidTour>}
 */
proto.VidTourList.prototype.getCvidtourList = function() {
  return /** @type{!Array.<!proto.VidTour>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidTour, 1));
};


/** @param {!Array.<!proto.VidTour>} value */
proto.VidTourList.prototype.setCvidtourList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidTour=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidTour}
 */
proto.VidTourList.prototype.addCvidtour = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidTour, opt_index);
};


proto.VidTourList.prototype.clearCvidtourList = function() {
  this.setCvidtourList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidGroup.repeatedFields_, null);
};
goog.inherits(proto.VidGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidGroup.displayName = 'proto.VidGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidGroup.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.VidGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidGroup} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cgroupList: jspb.Message.toObjectList(msg.getCgroupList(),
    proto.VidCameraId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidGroup}
 */
proto.VidGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidGroup;
  return proto.VidGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidGroup}
 */
proto.VidGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    case 3:
      var value = new proto.VidCameraId;
      reader.readMessage(value,proto.VidCameraId.deserializeBinaryFromReader);
      msg.addCgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidGroup} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCgroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.VidCameraId.serializeBinaryToWriter
    );
  }
};


/**
 * optional string strId = 1;
 * @return {string}
 */
proto.VidGroup.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidGroup.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strName = 2;
 * @return {string}
 */
proto.VidGroup.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidGroup.prototype.setStrname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated VidCameraId cGroup = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidCameraId>}
 */
proto.VidGroup.prototype.getCgroupList = function() {
  return /** @type{!Array.<!proto.VidCameraId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidCameraId, 3));
};


/** @param {!Array.<!proto.VidCameraId>} value */
proto.VidGroup.prototype.setCgroupList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.VidCameraId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidCameraId}
 */
proto.VidGroup.prototype.addCgroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.VidCameraId, opt_index);
};


proto.VidGroup.prototype.clearCgroupList = function() {
  this.setCgroupList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidGroupList.repeatedFields_, null);
};
goog.inherits(proto.VidGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidGroupList.displayName = 'proto.VidGroupList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidGroupList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cvidgroupList: jspb.Message.toObjectList(msg.getCvidgroupList(),
    proto.VidGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidGroupList}
 */
proto.VidGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidGroupList;
  return proto.VidGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidGroupList}
 */
proto.VidGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidGroup;
      reader.readMessage(value,proto.VidGroup.deserializeBinaryFromReader);
      msg.addCvidgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidGroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidGroupList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidGroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCvidgroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidGroup cVidGroup = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidGroup>}
 */
proto.VidGroupList.prototype.getCvidgroupList = function() {
  return /** @type{!Array.<!proto.VidGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidGroup, 1));
};


/** @param {!Array.<!proto.VidGroup>} value */
proto.VidGroupList.prototype.setCvidgroupList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidGroup}
 */
proto.VidGroupList.prototype.addCvidgroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidGroup, opt_index);
};


proto.VidGroupList.prototype.clearCvidgroupList = function() {
  this.setCvidgroupList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidEmapCamera = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidEmapCamera, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidEmapCamera.displayName = 'proto.VidEmapCamera';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidEmapCamera.prototype.toObject = function(opt_includeInstance) {
  return proto.VidEmapCamera.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidEmapCamera} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidEmapCamera.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: (f = msg.getCid()) && proto.VidCameraId.toObject(includeInstance, f),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0),
    w: jspb.Message.getFieldWithDefault(msg, 4, 0),
    h: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidEmapCamera}
 */
proto.VidEmapCamera.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidEmapCamera;
  return proto.VidEmapCamera.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidEmapCamera} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidEmapCamera}
 */
proto.VidEmapCamera.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidCameraId;
      reader.readMessage(value,proto.VidCameraId.deserializeBinaryFromReader);
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setW(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setH(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidEmapCamera.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidEmapCamera.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidEmapCamera} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidEmapCamera.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VidCameraId.serializeBinaryToWriter
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getW();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getH();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional VidCameraId cId = 1;
 * @return {?proto.VidCameraId}
 */
proto.VidEmapCamera.prototype.getCid = function() {
  return /** @type{?proto.VidCameraId} */ (
    jspb.Message.getWrapperField(this, proto.VidCameraId, 1));
};


/** @param {?proto.VidCameraId|undefined} value */
proto.VidEmapCamera.prototype.setCid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.VidEmapCamera.prototype.clearCid = function() {
  this.setCid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.VidEmapCamera.prototype.hasCid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.VidEmapCamera.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.VidEmapCamera.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.VidEmapCamera.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.VidEmapCamera.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 w = 4;
 * @return {number}
 */
proto.VidEmapCamera.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.VidEmapCamera.prototype.setW = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 h = 5;
 * @return {number}
 */
proto.VidEmapCamera.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.VidEmapCamera.prototype.setH = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidEmap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidEmap.repeatedFields_, null);
};
goog.inherits(proto.VidEmap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidEmap.displayName = 'proto.VidEmap';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidEmap.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidEmap.prototype.toObject = function(opt_includeInstance) {
  return proto.VidEmap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidEmap} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidEmap.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ccameraList: jspb.Message.toObjectList(msg.getCcameraList(),
    proto.VidEmapCamera.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidEmap}
 */
proto.VidEmap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidEmap;
  return proto.VidEmap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidEmap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidEmap}
 */
proto.VidEmap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    case 3:
      var value = new proto.VidEmapCamera;
      reader.readMessage(value,proto.VidEmapCamera.deserializeBinaryFromReader);
      msg.addCcamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidEmap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidEmap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidEmap} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidEmap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCcameraList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.VidEmapCamera.serializeBinaryToWriter
    );
  }
};


/**
 * optional string strId = 1;
 * @return {string}
 */
proto.VidEmap.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidEmap.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strName = 2;
 * @return {string}
 */
proto.VidEmap.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidEmap.prototype.setStrname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated VidEmapCamera cCamera = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidEmapCamera>}
 */
proto.VidEmap.prototype.getCcameraList = function() {
  return /** @type{!Array.<!proto.VidEmapCamera>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidEmapCamera, 3));
};


/** @param {!Array.<!proto.VidEmapCamera>} value */
proto.VidEmap.prototype.setCcameraList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.VidEmapCamera=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidEmapCamera}
 */
proto.VidEmap.prototype.addCcamera = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.VidEmapCamera, opt_index);
};


proto.VidEmap.prototype.clearCcameraList = function() {
  this.setCcameraList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidEmapList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidEmapList.repeatedFields_, null);
};
goog.inherits(proto.VidEmapList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidEmapList.displayName = 'proto.VidEmapList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidEmapList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidEmapList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidEmapList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidEmapList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidEmapList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cvidemapList: jspb.Message.toObjectList(msg.getCvidemapList(),
    proto.VidEmap.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidEmapList}
 */
proto.VidEmapList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidEmapList;
  return proto.VidEmapList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidEmapList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidEmapList}
 */
proto.VidEmapList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidEmap;
      reader.readMessage(value,proto.VidEmap.deserializeBinaryFromReader);
      msg.addCvidemap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidEmapList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidEmapList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidEmapList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidEmapList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCvidemapList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidEmap.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidEmap cVidEmap = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidEmap>}
 */
proto.VidEmapList.prototype.getCvidemapList = function() {
  return /** @type{!Array.<!proto.VidEmap>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidEmap, 1));
};


/** @param {!Array.<!proto.VidEmap>} value */
proto.VidEmapList.prototype.setCvidemapList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidEmap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidEmap}
 */
proto.VidEmapList.prototype.addCvidemap = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidEmap, opt_index);
};


proto.VidEmapList.prototype.clearCvidemapList = function() {
  this.setCvidemapList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidStream.displayName = 'proto.VidStream';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidStream.prototype.toObject = function(opt_includeInstance) {
  return proto.VidStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidStream} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    strtoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidStream}
 */
proto.VidStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidStream;
  return proto.VidStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidStream}
 */
proto.VidStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrtoken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidStream} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrtoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string strToken = 1;
 * @return {string}
 */
proto.VidStream.prototype.getStrtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidStream.prototype.setStrtoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strName = 2;
 * @return {string}
 */
proto.VidStream.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidStream.prototype.setStrname = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidStreamList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidStreamList.repeatedFields_, null);
};
goog.inherits(proto.VidStreamList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidStreamList.displayName = 'proto.VidStreamList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidStreamList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidStreamList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidStreamList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidStreamList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidStreamList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cvidstreamList: jspb.Message.toObjectList(msg.getCvidstreamList(),
    proto.VidStream.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidStreamList}
 */
proto.VidStreamList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidStreamList;
  return proto.VidStreamList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidStreamList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidStreamList}
 */
proto.VidStreamList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidStream;
      reader.readMessage(value,proto.VidStream.deserializeBinaryFromReader);
      msg.addCvidstream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidStreamList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidStreamList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidStreamList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidStreamList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCvidstreamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidStream.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidStream cVidStream = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidStream>}
 */
proto.VidStreamList.prototype.getCvidstreamList = function() {
  return /** @type{!Array.<!proto.VidStream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidStream, 1));
};


/** @param {!Array.<!proto.VidStream>} value */
proto.VidStreamList.prototype.setCvidstreamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidStream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidStream}
 */
proto.VidStreamList.prototype.addCvidstream = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidStream, opt_index);
};


proto.VidStreamList.prototype.clearCvidstreamList = function() {
  this.setCvidstreamList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidBlob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidBlob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidBlob.displayName = 'proto.VidBlob';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidBlob.prototype.toObject = function(opt_includeInstance) {
  return proto.VidBlob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidBlob} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidBlob.toObject = function(includeInstance, msg) {
  var f, obj = {
    x0: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y0: jspb.Message.getFieldWithDefault(msg, 2, 0),
    x1: jspb.Message.getFieldWithDefault(msg, 3, 0),
    y1: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidBlob}
 */
proto.VidBlob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidBlob;
  return proto.VidBlob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidBlob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidBlob}
 */
proto.VidBlob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX0(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY0(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX1(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidBlob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidBlob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidBlob} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidBlob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX0();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY0();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getX1();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getY1();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 x0 = 1;
 * @return {number}
 */
proto.VidBlob.prototype.getX0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.VidBlob.prototype.setX0 = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 y0 = 2;
 * @return {number}
 */
proto.VidBlob.prototype.getY0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.VidBlob.prototype.setY0 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 x1 = 3;
 * @return {number}
 */
proto.VidBlob.prototype.getX1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.VidBlob.prototype.setX1 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 y1 = 4;
 * @return {number}
 */
proto.VidBlob.prototype.getY1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.VidBlob.prototype.setY1 = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidBlobList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidBlobList.repeatedFields_, null);
};
goog.inherits(proto.VidBlobList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidBlobList.displayName = 'proto.VidBlobList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidBlobList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidBlobList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidBlobList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidBlobList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidBlobList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cblobList: jspb.Message.toObjectList(msg.getCblobList(),
    proto.VidBlob.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidBlobList}
 */
proto.VidBlobList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidBlobList;
  return proto.VidBlobList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidBlobList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidBlobList}
 */
proto.VidBlobList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidBlob;
      reader.readMessage(value,proto.VidBlob.deserializeBinaryFromReader);
      msg.addCblob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidBlobList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidBlobList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidBlobList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidBlobList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCblobList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidBlob.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidBlob cBlob = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidBlob>}
 */
proto.VidBlobList.prototype.getCblobList = function() {
  return /** @type{!Array.<!proto.VidBlob>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidBlob, 1));
};


/** @param {!Array.<!proto.VidBlob>} value */
proto.VidBlobList.prototype.setCblobList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidBlob=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidBlob}
 */
proto.VidBlobList.prototype.addCblob = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidBlob, opt_index);
};


proto.VidBlobList.prototype.clearCblobList = function() {
  this.setCblobList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidEventDBConf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidEventDBConf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidEventDBConf.displayName = 'proto.VidEventDBConf';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidEventDBConf.prototype.toObject = function(opt_includeInstance) {
  return proto.VidEventDBConf.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidEventDBConf} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidEventDBConf.toObject = function(includeInstance, msg) {
  var f, obj = {
    ntype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    strdbpath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidEventDBConf}
 */
proto.VidEventDBConf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidEventDBConf;
  return proto.VidEventDBConf.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidEventDBConf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidEventDBConf}
 */
proto.VidEventDBConf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VidEventDBType} */ (reader.readEnum());
      msg.setNtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrdbpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidEventDBConf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidEventDBConf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidEventDBConf} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidEventDBConf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStrdbpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional VidEventDBType nType = 1;
 * @return {!proto.VidEventDBType}
 */
proto.VidEventDBConf.prototype.getNtype = function() {
  return /** @type {!proto.VidEventDBType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.VidEventDBType} value */
proto.VidEventDBConf.prototype.setNtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strDBPath = 2;
 * @return {string}
 */
proto.VidEventDBConf.prototype.getStrdbpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidEventDBConf.prototype.setStrdbpath = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidEvent.displayName = 'proto.VidEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.VidEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strdevice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    strdevicename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    strtype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ntime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    strtime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    strdesc: jspb.Message.getFieldWithDefault(msg, 7, ""),
    bhandled: jspb.Message.getFieldWithDefault(msg, 8, false),
    bsearched: jspb.Message.getFieldWithDefault(msg, 9, false),
    strcomments: jspb.Message.getFieldWithDefault(msg, 10, ""),
    strstorid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    strstorname: jspb.Message.getFieldWithDefault(msg, 12, ""),
    nidx: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidEvent}
 */
proto.VidEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidEvent;
  return proto.VidEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidEvent}
 */
proto.VidEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrdevice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrdevicename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrtype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNtime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrtime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrdesc(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBhandled(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsearched(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrcomments(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstorid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstorname(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNidx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrdevice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStrdevicename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStrtype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNtime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getStrtime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStrdesc();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBhandled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getBsearched();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getStrcomments();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getStrstorid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getStrstorname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getNidx();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
};


/**
 * optional string strId = 1;
 * @return {string}
 */
proto.VidEvent.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strDevice = 2;
 * @return {string}
 */
proto.VidEvent.prototype.getStrdevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrdevice = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string strDeviceName = 3;
 * @return {string}
 */
proto.VidEvent.prototype.getStrdevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrdevicename = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string strType = 4;
 * @return {string}
 */
proto.VidEvent.prototype.getStrtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrtype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 nTime = 5;
 * @return {number}
 */
proto.VidEvent.prototype.getNtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.VidEvent.prototype.setNtime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string strTime = 6;
 * @return {string}
 */
proto.VidEvent.prototype.getStrtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrtime = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string strDesc = 7;
 * @return {string}
 */
proto.VidEvent.prototype.getStrdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrdesc = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool bHandled = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidEvent.prototype.getBhandled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.VidEvent.prototype.setBhandled = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool bSearched = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.VidEvent.prototype.getBsearched = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.VidEvent.prototype.setBsearched = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string strComments = 10;
 * @return {string}
 */
proto.VidEvent.prototype.getStrcomments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrcomments = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string strStorId = 11;
 * @return {string}
 */
proto.VidEvent.prototype.getStrstorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrstorid = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string strStorName = 12;
 * @return {string}
 */
proto.VidEvent.prototype.getStrstorname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.VidEvent.prototype.setStrstorname = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int64 nIdx = 13;
 * @return {number}
 */
proto.VidEvent.prototype.getNidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.VidEvent.prototype.setNidx = function(value) {
  jspb.Message.setField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidStreamUrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidStreamUrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidStreamUrl.displayName = 'proto.VidStreamUrl';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidStreamUrl.prototype.toObject = function(opt_includeInstance) {
  return proto.VidStreamUrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidStreamUrl} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidStreamUrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    strprotocol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strurl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidStreamUrl}
 */
proto.VidStreamUrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidStreamUrl;
  return proto.VidStreamUrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidStreamUrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidStreamUrl}
 */
proto.VidStreamUrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrprotocol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidStreamUrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidStreamUrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidStreamUrl} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidStreamUrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrprotocol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string strProtocol = 1;
 * @return {string}
 */
proto.VidStreamUrl.prototype.getStrprotocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidStreamUrl.prototype.setStrprotocol = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strUrl = 2;
 * @return {string}
 */
proto.VidStreamUrl.prototype.getStrurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidStreamUrl.prototype.setStrurl = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidStreamUrlList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidStreamUrlList.repeatedFields_, null);
};
goog.inherits(proto.VidStreamUrlList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidStreamUrlList.displayName = 'proto.VidStreamUrlList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidStreamUrlList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidStreamUrlList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidStreamUrlList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidStreamUrlList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidStreamUrlList.toObject = function(includeInstance, msg) {
  var f, obj = {
    curlList: jspb.Message.toObjectList(msg.getCurlList(),
    proto.VidStreamUrl.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidStreamUrlList}
 */
proto.VidStreamUrlList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidStreamUrlList;
  return proto.VidStreamUrlList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidStreamUrlList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidStreamUrlList}
 */
proto.VidStreamUrlList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidStreamUrl;
      reader.readMessage(value,proto.VidStreamUrl.deserializeBinaryFromReader);
      msg.addCurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidStreamUrlList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidStreamUrlList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidStreamUrlList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidStreamUrlList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidStreamUrl.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidStreamUrl cUrl = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidStreamUrl>}
 */
proto.VidStreamUrlList.prototype.getCurlList = function() {
  return /** @type{!Array.<!proto.VidStreamUrl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidStreamUrl, 1));
};


/** @param {!Array.<!proto.VidStreamUrl>} value */
proto.VidStreamUrlList.prototype.setCurlList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidStreamUrl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidStreamUrl}
 */
proto.VidStreamUrlList.prototype.addCurl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidStreamUrl, opt_index);
};


proto.VidStreamUrlList.prototype.clearCurlList = function() {
  this.setCurlList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidSocket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VidSocket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidSocket.displayName = 'proto.VidSocket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidSocket.prototype.toObject = function(opt_includeInstance) {
  return proto.VidSocket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidSocket} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidSocket.toObject = function(includeInstance, msg) {
  var f, obj = {
    strid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nconnecttype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ndatalen: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nfps: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidSocket}
 */
proto.VidSocket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidSocket;
  return proto.VidSocket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidSocket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidSocket}
 */
proto.VidSocket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrip(value);
      break;
    case 3:
      var value = /** @type {!proto.SocketConnectType} */ (reader.readEnum());
      msg.setNconnecttype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNdatalen(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNfps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidSocket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidSocket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidSocket} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidSocket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNconnecttype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNdatalen();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getNfps();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string strid = 1;
 * @return {string}
 */
proto.VidSocket.prototype.getStrid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.VidSocket.prototype.setStrid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string strIp = 2;
 * @return {string}
 */
proto.VidSocket.prototype.getStrip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.VidSocket.prototype.setStrip = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SocketConnectType nConnectType = 3;
 * @return {!proto.SocketConnectType}
 */
proto.VidSocket.prototype.getNconnecttype = function() {
  return /** @type {!proto.SocketConnectType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SocketConnectType} value */
proto.VidSocket.prototype.setNconnecttype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 nDataLen = 4;
 * @return {number}
 */
proto.VidSocket.prototype.getNdatalen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.VidSocket.prototype.setNdatalen = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 nFps = 5;
 * @return {number}
 */
proto.VidSocket.prototype.getNfps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.VidSocket.prototype.setNfps = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VidSocketList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VidSocketList.repeatedFields_, null);
};
goog.inherits(proto.VidSocketList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VidSocketList.displayName = 'proto.VidSocketList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VidSocketList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VidSocketList.prototype.toObject = function(opt_includeInstance) {
  return proto.VidSocketList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VidSocketList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.VidSocketList.toObject = function(includeInstance, msg) {
  var f, obj = {
    cvidsocketList: jspb.Message.toObjectList(msg.getCvidsocketList(),
    proto.VidSocket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VidSocketList}
 */
proto.VidSocketList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VidSocketList;
  return proto.VidSocketList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VidSocketList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VidSocketList}
 */
proto.VidSocketList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VidSocket;
      reader.readMessage(value,proto.VidSocket.deserializeBinaryFromReader);
      msg.addCvidsocket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VidSocketList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VidSocketList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VidSocketList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.VidSocketList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCvidsocketList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VidSocket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VidSocket cVidSocket = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.VidSocket>}
 */
proto.VidSocketList.prototype.getCvidsocketList = function() {
  return /** @type{!Array.<!proto.VidSocket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VidSocket, 1));
};


/** @param {!Array.<!proto.VidSocket>} value */
proto.VidSocketList.prototype.setCvidsocketList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VidSocket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VidSocket}
 */
proto.VidSocketList.prototype.addCvidsocket = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VidSocket, opt_index);
};


proto.VidSocketList.prototype.clearCvidsocketList = function() {
  this.setCvidsocketList([]);
};


/**
 * @enum {number}
 */
proto.CameraType = {
  VID_0: 0,
  VID_USB: 1,
  VID_FILE: 2,
  VID_RTSP: 3,
  VID_ONVIF_S: 4,
  VID_GB28181: 5,
  VID_MJPEG: 6
};

/**
 * @enum {number}
 */
proto.VidRecType = {
  VID_R_OFF: 0,
  VID_R_ALARM: 1,
  VID_R_SCHED: 2
};

/**
 * @enum {number}
 */
proto.CameraConnectType = {
  VID_CONNECT_0: 0,
  VID_CONNECT_TCP: 1,
  VID_CONNECT_UDP: 2
};

/**
 * @enum {number}
 */
proto.OnvifEventLevel = {
  VID_ONVIF_EVENT_OFF: 0,
  VID_ONVIF_EVENT_FULL: 1,
  VID_ONVIF_EVENT_MOTION: 2
};

/**
 * @enum {number}
 */
proto.VidLanguage = {
  VID_LANG_AUTO: 0,
  VID_EN: 1,
  VID_ZH_CN: 2
};

/**
 * @enum {number}
 */
proto.VidLayout = {
  VID_LAYOUT_MODE_0: 0,
  VID_LAYOUT_MODE_1: 1,
  VID_LAYOUT_MODE_2X2: 2,
  VID_LAYOUT_MODE_3X3: 3,
  VID_LAYOUT_MODE_4X4: 4,
  VID_LAYOUT_MODE_6: 5,
  VID_LAYOUT_MODE_8: 6,
  VID_LAYOUT_MODE_12P1: 7,
  VID_LAYOUT_MODE_5X5: 8,
  VID_LAYOUT_MODE_6X6: 9,
  VID_LAYOUT_MODE_8X8: 10,
  VID_LAYOUT_MODE_ONE: 11,
  VID_LAYOUT_MODE_1X3: 12,
  VID_LAYOUT_MODE_1P6: 13
};

/**
 * @enum {number}
 */
proto.VidEventDBType = {
  VID_DB_SQLITE: 0,
  VID_DB_POSTGRESQL: 1
};

/**
 * @enum {number}
 */
proto.SocketConnectType = {
  VID_CONNECT_ADMIN: 0,
  VID_CONNECT_USER: 1
};

goog.object.extend(exports, proto);
